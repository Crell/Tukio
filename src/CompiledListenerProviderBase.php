<?php

declare(strict_types=1);

namespace Crell\Tukio;

use Crell\Tukio\Entry\ListenerFunctionEntry;
use Crell\Tukio\Entry\ListenerServiceEntry;
use Crell\Tukio\Entry\ListenerStaticMethodEntry;
use Psr\Container\ContainerInterface;
use Psr\EventDispatcher\ListenerProviderInterface;

class CompiledListenerProviderBase implements ListenerProviderInterface
{
    /** @var ContainerInterface */
    protected $container;

    // This nested array will be generated by the compiler in a subclass.  It's listed here for reference only.
    // Its structure is an ordered list of array definitions, each of which corresponds to one of the defined
    // entry types in the classes seen in getListenerForEvent().  See each class's getProperties() method for the
    // exact structure.
    /** @var array */
    // protected const LISTENERS = [];

    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }

    public function getListenersForEvent(object $event): iterable
    {
        $count = count(static::LISTENERS);
        $ret = [];
        for ($i= 0; $i < $count; ++$i) {
            /** @var array $listener */
            $listener = static::LISTENERS[$i];
            if ($event instanceof $listener['type']) {
                switch ($listener['entryType']) {
                    case ListenerFunctionEntry::class:
                        $ret[] = $listener['listener'];
                        break;
                    case ListenerStaticMethodEntry::class:
                        $ret[] = [$listener['class'], $listener['method']];
                        break;
                    case ListenerServiceEntry::class:
                        $ret[] = function (object $event) use ($listener): void {
                            $this->container->get($listener['serviceName'])->{$listener['method']}($event);
                        };
                        break;
                    default:
                        throw new \RuntimeException(sprintf('No such listener type found in compiled container definition: %s', $listener['entryType']));
                }
            }
        }
        return $ret;
    }
}
