<?php
declare(strict_types=1);

namespace Crell\Tukio;

use Crell\Tukio\Entry\ListenerFunctionEntry;
use Crell\Tukio\Entry\ListenerServiceEntry;
use Crell\Tukio\Entry\ListenerStaticMethodEntry;
use Psr\Container\ContainerInterface;
use Psr\EventDispatcher\EventInterface;
use Psr\EventDispatcher\ListenerProviderInterface;

class CompiledListenerProviderBase implements ListenerProviderInterface
{
    /** @var ContainerInterface */
    protected $container;

    // This nested array will be generated by the compiler in a subclass.  It's listed here for reference only.
    // Its structure is an ordered list of array definitions, each of which corresponds to one of the defined
    // entry types in the classes seen in getListenerForEvent().  See each class's getProperties() method for the
    // exact structure.
    /** @var array */
    // protected $listeners = [];

    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }

    public function getListenersForEvent(EventInterface $event): iterable
    {
        /** @var array $listener */
        foreach (static::LISTENERS as $listener) {
            if ($event instanceof $listener['type']) {
                switch ($listener['entryType']) {
                    case ListenerFunctionEntry::class:
                        yield $listener['listener'];
                        break;
                    case ListenerStaticMethodEntry::class:
                        yield [$listener['class'], $listener['method']];
                        break;
                    case ListenerServiceEntry::class:
                        yield function (EventInterface $event) use ($listener) {
                            $this->container->get($listener['serviceName'])->{$listener['method']}($event);
                        };
                        break;
                    default:
                        throw new \RuntimeException(sprintf('No such listener type found in compiled container definition: %s', $listener['entryType']));
                }
            }
        }
    }
}
